# -*- coding: utf-8 -*-
"""Rodpdi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVdug9dtOAmy4Br4ACnFNnP_HfH1Psc3
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import cv2
import matplotlib.image as mpimg
import PIL

"""# Parte I

## Imagem:
"""

image = mpimg.imread("teste.jpg")
plt.imshow(image)

image.shape # tamanho da imagem com os 3 canais BGR

"""### Imagem em Negativa:"""

negative_image = 255 - image

plt.figure(figsize=(15,10))
columns = 2
images=[image, negative_image]
for i, img in enumerate(images):
    plt.subplot(len(images) / columns + 1, columns, i + 1)
    plt.imshow(img)

"""### Transformação Logaritmica:"""

c = 255/(np.log(1 + np.max(image)))

log_image = c * np.log(1 + image)

log_image = np.array(log_image, dtype = np.uint8)

plt.figure(figsize=(15,10))

images=[image, log_image]
for i, img in enumerate(images):
    plt.subplot(len(images) / columns + 1, columns, i + 1)
    plt.imshow(img)

"""### Transformação Exponencial:"""

gamma = [1.5, 0.5, 2.0, 2.2]
expo_image = np.array(255*(image/255) ** gamma[0], dtype = 'uint8')

plt.figure(figsize=(15,10))

images=[image, expo_image]
for i, img in enumerate(images):
    plt.subplot(len(images) / columns + 1, columns, i + 1)
    plt.imshow(img)

"""# Parte II

### Passando a imagem para escala de cinza:
"""

image_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)

plt.figure(figsize=(15,10))
images=[image, image_gray]

for i, img in enumerate(images):
    if i == 0:
        plt.subplot(len(images) / columns + 1, columns, i + 1)
        plt.imshow(img)
    else:
        plt.subplot(len(images) / columns + 1, columns, i + 1)
        plt.imshow(img, cmap='gray')

plt.figure(figsize=(15,10))
eq_image_gray = cv2.equalizeHist(image_gray)

images=[image_gray, eq_image_gray]

for i, img in enumerate(images):
    if i == 0:
        plt.subplot(len(images) / columns + 1, columns, i + 1)
        plt.imshow(image_gray, cmap='gray')
    else:
        plt.subplot(len(images) / columns + 1, columns, i + 1)
        plt.imshow(img, cmap='gray')

# HISTOGRAMAS

plt.figure()
plt.title('Histograma Original')
plt.hist(image_gray.ravel(), 256, [0,256])
plt.xlim([0, 256])
plt.show()

plt.figure()
plt.title('Histograma Equalizado')
plt.hist(eq_image_gray.ravel(), 256, [0,256])
plt.xlim([0, 256])
plt.show()

plt.imsave('eq_image_gray.jpg', eq_image_gray, cmap='gray')

"""### Especificar Hisotgrama:"""

image_especified = mpimg.imread('eq_image_gray.jpg')

plt.figure()
plt.title('Histograma Equalizado')
plt.hist(eq_image_gray.ravel(), 256, [0,256])
plt.xlim([0, 256])
plt.show()

plt.figure()
plt.title('Especificação')
plt.hist(image_especified.ravel(), 256, [0,256])
plt.xlim([0, 256])
plt.show()

plt.imsave('specified.jpg', image_especified, cmap = 'gray')

plt.figure(figsize=(15,10))
specified = mpimg.imread('specified.jpg')
images=[eq_image_gray, specified]

for i, img in enumerate(images):
    if i == 0:
        plt.subplot(len(images) / columns + 1, columns, i + 1)
        plt.imshow(img, cmap='gray')
    else:
        plt.subplot(len(images) / columns + 1, columns, i + 1)
        plt.imshow(img, cmap='gray')

teste = cv2.imread('bolota.jpg')
b, g, r = cv2.split(teste)
cv2.imwrite('bola_red.jpg', r)
red = mpimg.imread('bola_red.jpg')
plt.imshow(red, cmap = "Reds")

cv2.imwrite('bolaG.jpg', g)
green = mpimg.imread('bolaG.jpg')
plt.imshow(green, cmap = "Greens")

cv2.imwrite('bola_blu.jpg', b)
blu = mpimg.imread('bola_blu.jpg')
plt.imshow(blu, cmap = "Blues")

image = cv2.imread('bolota.jpg')
hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
h, s, v = cv2.split(hsv_image)
h.fill(111)
hsv_image = cv2.merge([h, s, v])

out = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)

plt.imshow(out)

cv2.imwrite('gatoH.jpg', h)
hue = mpimg.imread('gatoH.jpg')
plt.imshow(hue)

cv2.imwrite('testeS.jpg', s)
sat = mpimg.imread('testeS.jpg')
plt.imshow(sat, cmap = 'gray')

cv2.imwrite('canalV.jpg', v)
val = mpimg.imread('canalV.jpg')
plt.imshow(val, cmap = 'gray')